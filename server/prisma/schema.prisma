// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  account  String
  hashedPassword String
  avatar   String    @default("server/public/assets/images/placeholder-user.png")
  nickname String
  fullName String
  bio      String?
  link     String?
  createDate DateTime @default(now())
  posts    Post[]   
  playlists Playlist[]
  comments  Comment[]
  sentMessages Message[] @relation("send")
  receivedMessages Message[] @relation("receive")
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")
  messageReactions MessageReaction[]
  commentReactions CommentReaction[]
  likedPost UserLikedPost[]
  savedPost UserSavedPost[]
  @@map("users")
}

model Playlist {
  id       Int       @id @default(autoincrement())
  cover    String    
  title    String
  user     User      @relation(fields: [userID], references: [id])
  userID   Int
  posts    PlaylistPost[]
  createdDate DateTime @default(now())
  @@map("playlists")
} 

model Post {
  id       Int       @id @default(autoincrement())
  title    String
  music    String?
  video    String
  share    Int       @default(0)
  views    Int       @default(0)
  createdDate DateTime @default(now())
  user     User      @relation(fields: [userID], references: [id])
  userID   Int
  playlists PlaylistPost[]
  comments Comment[]
  userLiked UserLikedPost[]
  userSaved UserSavedPost[]
  @@map("posts")
} 

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createDate  DateTime @default(now())
  user        User     @relation(fields: [userID], references: [id])
  userID      Int
  post        Post     @relation(fields: [postID], references: [id])
  postID      Int
  reactions   CommentReaction[]
  @@map("comments")
}

model Reaction {
  id          Int     @id @default(autoincrement())
  name        String
  emoji       String
  messages    MessageReaction[]
  comments    CommentReaction[]
  @@map("reactions")
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdDate DateTime @default(now())
  receiver    User     @relation(name: "receive", fields: [receiverID], references: [id])
  receiverID  Int
  sender      User     @relation(name: "send", fields: [senderID], references: [id])
  senderID    Int
  reactions   MessageReaction[]
  // @@id([receiverID, senderID])
  @@map("messages")
}

model Follow {
  follower    User    @relation(name: "follower", fields: [followerID], references: [id])
  followerID  Int
  following   User     @relation(name: "following", fields: [followingID], references: [id])
  followingID Int
  createDate  DateTime @default(now())
  @@id([followerID, followingID])
  @@map("follows")
}

model PlaylistPost {
  post     Post     @relation(fields: [postID], references: [id])
  postID   Int
  playlist Playlist  @relation(fields: [playlistID], references: [id])
  playlistID Int
  createdDate DateTime @default(now())
  @@id([playlistID, postID])
  @@map("playlistPosts")
}

model MessageReaction {
  message Message @relation(fields: [messageID], references: [id])
  messageID Int
  reaction  Reaction  @relation(fields: [reactionID], references: [id])
  reactionID  Int
  user      User      @relation(fields: [userID], references: [id])
  userID    Int
  createDate DateTime @default(now())
  @@id([messageID, reactionID, userID])
  @@map("messageReactions")
}

model CommentReaction {
  comment Comment @relation(fields: [commentID], references: [id])
  commentID Int
  reaction Reaction @relation(fields: [reactionID], references: [id])
  reactionID Int
  user    User      @relation(fields: [userID], references: [id])
  userID Int
  createDate  DateTime  @default(now())
  @@id([commentID, reactionID, userID])
  @@map("commentReactions")
}

model UserLikedPost {
  user  User  @relation(fields: [userID], references: [id])
  userID  Int
  post  Post  @relation(fields: [postID], references: [id])
  postID  Int
  createDate  DateTime  @default(now())
  @@id([userID, postID])
  @@map("userLikedPosts")
}

model UserSavedPost {
  user  User  @relation(fields: [userID], references: [id])
  userID  Int
  post  Post  @relation(fields: [postID], references: [id])
  postID  Int
  createDate  DateTime  @default(now())
  @@id([userID, postID])
  @@map("userSavedPosts")
}